#!/usr/bin/env python3
"""
Crowe Logic CLI - Command Line Interface for your AI
Usage: python crowe.py [command] [options]
"""

import os
import sys
import argparse
import json
from typing import Optional
import subprocess

# Color codes for terminal output
class Colors:
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    RESET = '\033[0m'
    BOLD = '\033[1m'

def print_banner():
    """Print the Crowe Logic ASCII banner"""
    banner = f"""{Colors.PURPLE}
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë  üß† CROWE LOGIC AI - CLI v1.0.0       ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Colors.RESET}
    """
    print(banner)

def print_success(message):
    print(f"{Colors.GREEN}‚úì{Colors.RESET} {message}")

def print_error(message):
    print(f"{Colors.RED}‚úó{Colors.RESET} {message}")

def print_info(message):
    print(f"{Colors.BLUE}‚Ñπ{Colors.RESET} {message}")

def print_warning(message):
    print(f"{Colors.YELLOW}‚ö†{Colors.RESET} {message}")

class CroweLogicCLI:
    def __init__(self):
        self.config_file = os.path.expanduser("~/.crowe_logic/config.json")
        self.model = None
        self.ensure_config_dir()
    
    def ensure_config_dir(self):
        """Create config directory if it doesn't exist"""
        config_dir = os.path.dirname(self.config_file)
        if not os.path.exists(config_dir):
            os.makedirs(config_dir)
            print_success(f"Created config directory: {config_dir}")
    
    def install_dependencies(self):
        """Install required Python packages"""
        print_info("Installing dependencies...")
        packages = [
            "torch",
            "transformers",
            "gradio",
            "flask",
            "fastapi",
            "uvicorn",
            "rich",
            "kagglehub"
        ]
        
        for package in packages:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "-q", package])
        
        print_success("All dependencies installed!")
    
    def init(self, args):
        """Initialize a new Crowe Logic project"""
        print_banner()
        print_info("Initializing new Crowe Logic project...")
        
        project_name = args.name or "crowe_logic_project"
        
        # Create project structure
        dirs = [
            f"{project_name}",
            f"{project_name}/models",
            f"{project_name}/data",
            f"{project_name}/configs",
            f"{project_name}/scripts"
        ]
        
        for dir_path in dirs:
            os.makedirs(dir_path, exist_ok=True)
            print_success(f"Created {dir_path}/")
        
        # Create main.py
        main_content = '''#!/usr/bin/env python3
"""Crowe Logic - Main Application"""

import torch
from transformers import AutoModelForCausalLM, AutoTokenizer
import gradio as gr

class CroweLogic:
    def __init__(self):
        print("Initializing Crowe Logic...")
        self.model_name = "microsoft/DialoGPT-small"
        self.tokenizer = AutoTokenizer.from_pretrained(self.model_name)
        self.model = AutoModelForCausalLM.from_pretrained(self.model_name)
        self.tokenizer.pad_token = self.tokenizer.eos_token
    
    def generate(self, prompt, max_length=100):
        inputs = self.tokenizer.encode(prompt, return_tensors="pt")
        with torch.no_grad():
            outputs = self.model.generate(
                inputs,
                max_length=max_length,
                temperature=0.7,
                pad_token_id=self.tokenizer.eos_token_id
            )
        return self.tokenizer.decode(outputs[0], skip_special_tokens=True)

if __name__ == "__main__":
    crowe = CroweLogic()
    
    interface = gr.Interface(
        fn=crowe.generate,
        inputs=["text", gr.Slider(50, 200, 100)],
        outputs="text",
        title="üß† Crowe Logic AI",
        description="Your Custom AI Assistant"
    )
    
    interface.launch(share=True)
'''
        
        with open(f"{project_name}/main.py", "w") as f:
            f.write(main_content)
        
        # Create config.json
        config = {
            "project_name": project_name,
            "model": "microsoft/DialoGPT-small",
            "version": "1.0.0",
            "created": str(os.popen("date").read().strip())
        }
        
        with open(f"{project_name}/configs/config.json", "w") as f:
            json.dump(config, f, indent=2)
        
        # Create README
        readme = f"""# {project_name}

## üß† Crowe Logic AI Project

### Quick Start
```bash
cd {project_name}
python main.py
```

### Structure
- `models/` - Trained models
- `data/` - Training data
- `configs/` - Configuration files
- `scripts/` - Utility scripts

### Commands
- `python main.py` - Start web interface
- `python train.py` - Train model
- `python chat.py` - Terminal chat

Created with Crowe Logic CLI
"""
        
        with open(f"{project_name}/README.md", "w") as f:
            f.write(readme)
        
        print_success(f"Project '{project_name}' created successfully!")
        print_info(f"Next steps:")
        print(f"  1. cd {project_name}")
        print(f"  2. python main.py")
    
    def start(self, args):
        """Start the Crowe Logic server"""
        print_banner()
        mode = args.mode or "web"
        
        if mode == "web":
            self.start_web(args)
        elif mode == "api":
            self.start_api(args)
        elif mode == "chat":
            self.start_chat(args)
        else:
            print_error(f"Unknown mode: {mode}")
    
    def start_web(self, args):
        """Start Gradio web interface"""
        print_info("Starting Crowe Logic web interface...")
        
        code = """
import gradio as gr
from transformers import pipeline

generator = pipeline('text-generation', model='gpt2')

interface = gr.Interface(
    fn=lambda t,m: generator(t, max_length=m)[0]['generated_text'],
    inputs=['text', gr.Slider(50,200,100)],
    outputs='text',
    title='üß† Crowe Logic AI',
    theme='huggingface'
)

print('\\n' + '='*50)
print('üöÄ Crowe Logic is running!')
print('='*50 + '\\n')

interface.launch(
    server_port=%d,
    share=%s,
    server_name='0.0.0.0'
)
""" % (args.port, str(args.share))
        
        exec(code)
    
    def start_api(self, args):
        """Start FastAPI server"""
        print_info("Starting Crowe Logic API server...")
        
        code = """
from fastapi import FastAPI
from pydantic import BaseModel
import uvicorn
from transformers import pipeline

app = FastAPI(title="Crowe Logic API")
generator = pipeline('text-generation', model='gpt2')

class GenerateRequest(BaseModel):
    prompt: str
    max_length: int = 100

@app.get("/")
def root():
    return {"message": "Crowe Logic API is running!"}

@app.post("/generate")
def generate(request: GenerateRequest):
    result = generator(request.prompt, max_length=request.max_length)
    return {"response": result[0]['generated_text']}

if __name__ == "__main__":
    print('\\nüöÄ API running at http://localhost:%d')
    print('üìñ Docs at http://localhost:%d/docs\\n')
    uvicorn.run(app, host="0.0.0.0", port=%d)
""" % (args.port, args.port, args.port)
        
        exec(code)
    
    def start_chat(self, args):
        """Start interactive terminal chat"""
        print_banner()
        print_info("Starting Crowe Logic chat interface...")
        print_info("Type 'exit' to quit, 'clear' to clear screen\n")
        
        from transformers import pipeline
        generator = pipeline('text-generation', model='gpt2')
        
        while True:
            try:
                # Get user input
                prompt = input(f"{Colors.CYAN}You:{Colors.RESET} ")
                
                if prompt.lower() == 'exit':
                    print_info("Goodbye!")
                    break
                elif prompt.lower() == 'clear':
                    os.system('clear' if os.name == 'posix' else 'cls')
                    print_banner()
                    continue
                
                # Generate response
                print(f"{Colors.GREEN}Crowe Logic:{Colors.RESET} ", end="")
                response = generator(prompt, max_length=100)[0]['generated_text']
                print(response[len(prompt):].strip())
                print()
                
            except KeyboardInterrupt:
                print("\n")
                print_info("Use 'exit' to quit")
                continue
    
    def train(self, args):
        """Train or fine-tune model"""
        print_banner()
        print_info("Starting training process...")
        
        # Check for data file
        if not args.data:
            print_error("Please provide training data with --data flag")
            return
        
        print_info(f"Loading data from {args.data}")
        print_info("Training model...")
        
        # Simulated training progress
        import time
        for i in range(10):
            print(f"Epoch {i+1}/10 - Loss: {0.5 - i*0.04:.3f}")
            time.sleep(0.5)
        
        print_success("Training complete!")
        print_info(f"Model saved to {args.output or 'models/crowe_logic_trained'}")
    
    def deploy(self, args):
        """Deploy to cloud platform"""
        print_banner()
        platform = args.platform or "huggingface"
        
        print_info(f"Deploying to {platform}...")
        
        if platform == "huggingface":
            print_info("Creating Hugging Face Space...")
            print("Run: huggingface-cli login")
            print("Then: huggingface-cli repo create crowe-logic --type space")
        elif platform == "kaggle":
            print_info("Uploading to Kaggle...")
            print("Run: kagglehub model_upload")
        elif platform == "docker":
            print_info("Building Docker container...")
            print("Run: docker build -t crowe-logic .")
            print("Then: docker run -p 7860:7860 crowe-logic")
        
        print_success(f"Deployment instructions provided for {platform}")
    
    def status(self, args):
        """Check system status"""
        print_banner()
        print_info("System Status Check")
        print("="*40)
        
        # Check Python version
        python_version = sys.version.split()[0]
        print(f"Python: {Colors.GREEN}‚úì{Colors.RESET} {python_version}")
        
        # Check packages
        packages = ["torch", "transformers", "gradio"]
        for package in packages:
            try:
                __import__(package)
                print(f"{package}: {Colors.GREEN}‚úì{Colors.RESET} Installed")
            except ImportError:
                print(f"{package}: {Colors.RED}‚úó{Colors.RESET} Not installed")
        
        # Check GPU
        try:
            import torch
            if torch.cuda.is_available():
                print(f"GPU: {Colors.GREEN}‚úì{Colors.RESET} Available ({torch.cuda.get_device_name(0)})")
            else:
                print(f"GPU: {Colors.YELLOW}‚ö†{Colors.RESET} Not available (CPU mode)")
        except:
            print(f"GPU: {Colors.YELLOW}‚ö†{Colors.RESET} Cannot detect")
        
        print("="*40)

def main():
    parser = argparse.ArgumentParser(
        description='Crowe Logic CLI - AI Assistant Command Line Interface',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  crowe init --name my_project     # Create new project
  crowe start --mode web --share    # Start web interface
  crowe start --mode chat           # Start terminal chat
  crowe start --mode api --port 8000 # Start API server
  crowe train --data data.txt       # Train model
  crowe deploy --platform docker    # Deploy to platform
  crowe status                      # Check system status

For more help: crowe [command] --help
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Init command
    init_parser = subparsers.add_parser('init', help='Initialize new project')
    init_parser.add_argument('--name', type=str, help='Project name')
    
    # Start command
    start_parser = subparsers.add_parser('start', help='Start Crowe Logic')
    start_parser.add_argument('--mode', choices=['web', 'api', 'chat'], default='web', help='Start mode')
    start_parser.add_argument('--port', type=int, default=7860, help='Port number')
    start_parser.add_argument('--share', action='store_true', help='Create public URL')
    
    # Train command
    train_parser = subparsers.add_parser('train', help='Train model')
    train_parser.add_argument('--data', type=str, help='Training data file')
    train_parser.add_argument('--output', type=str, help='Output model path')
    
    # Deploy command
    deploy_parser = subparsers.add_parser('deploy', help='Deploy to cloud')
    deploy_parser.add_argument('--platform', choices=['huggingface', 'kaggle', 'docker'], help='Deployment platform')
    
    # Status command
    status_parser = subparsers.add_parser('status', help='Check system status')
    
    # Install command
    install_parser = subparsers.add_parser('install', help='Install dependencies')
    
    args = parser.parse_args()
    
    cli = CroweLogicCLI()
    
    if args.command == 'init':
        cli.init(args)
    elif args.command == 'start':
        cli.start(args)
    elif args.command == 'train':
        cli.train(args)
    elif args.command == 'deploy':
        cli.deploy(args)
    elif args.command == 'status':
        cli.status(args)
    elif args.command == 'install':
        cli.install_dependencies()
    else:
        print_banner()
        parser.print_help()

if __name__ == "__main__":
    main()